<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>element-plus el-dialog详解</title>
    <link href="/2023/12/07/el-dialog%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/12/07/el-dialog%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="element-plus-el-dialog详解"><a href="#element-plus-el-dialog详解" class="headerlink" title="element-plus el-dialog详解"></a>element-plus el-dialog详解</h1><h2 id="介绍及基础使用"><a href="#介绍及基础使用" class="headerlink" title="介绍及基础使用"></a>介绍及基础使用</h2><p>el-dialog能够在页面保留当前状态下提供给一个场景来给用户进行额外的操作。</p><p>el-dialog通常使用一个visible状态来维持它是否显示，它提供了一个<code>append-to-body</code>属性来决定它是否插入到body标签上，el-dialog提供了一个默认的插槽在这个插槽里是对话框的主要内容区域，这里也是主要的业务逻辑展示区域，此外它还提供了header和footer插槽来供用户自定义对话框的头部和尾部，在这些插槽里通常会实现对话框的关闭逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">//基础使用<br>&lt;el-dialog<br>v-model=&quot;visible&quot;<br>title=&quot;Tips&quot;<br>width=&quot;30%&quot;<br>&gt;<br>    &lt;span&gt;This is a message&lt;/span&gt;<br>    &lt;template #footer&gt;<br>        &lt;span class=&quot;dialog-footer&quot;&gt;<br>            &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;Cancel&lt;/el-button&gt;<br>            &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;<br>                Confirm<br>            &lt;/el-button&gt;<br>        &lt;/span&gt;<br>    &lt;/template&gt;<br>&lt;/el-dialog&gt;<br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>import &#123; ElMessageBox &#125; from &#x27;element-plus&#x27;<br><br>const visible = ref(false)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="源码详解"><a href="#源码详解" class="headerlink" title="源码详解"></a>源码详解</h2><p>element-plus弹窗组件由el-overlay（遮罩层）、el-dialog-content和el-focus-trap组件所组成。</p><h3 id="el-overlay"><a href="#el-overlay" class="headerlink" title="el-overlay"></a>el-overlay</h3><p>el-overlay是对话框后一层黑色的遮罩它的组成结构简单，仅仅是一个position为fiexd的div，它占据了整个屏幕。关于这个组件唯一值得一提的是它接收了一个zIndex，而这个zIndex在element-plus中是被统一管理的，这样做的目的是保证zIndex不重复使得组件之间层级显示正常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- dialog中appendToBody使用teleport实现 --&gt;<br>&lt;teleport<br>    :to=&quot;appendTo&quot;<br>    :disabled=&quot;appendTo !== &#x27;body&#x27; ? false : !appendToBody&quot;<br>  &gt;<br>      ...<br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure><h3 id="element-plus中的zIndex"><a href="#element-plus中的zIndex" class="headerlink" title="element-plus中的zIndex"></a>element-plus中的zIndex</h3><p>element-plus实现了一个钩子<code>useZIndex</code>，在这个钩子中维护了一个zIndex（默认zIndex起始值为2000），以及获取zIndex的方法nextZIndex。通过调用nextZIndex能得到当前需要的zIndex值（nexZindex会对当前的zIndex进行累加，zIndex++）。</p><h3 id="el-dialog-content"><a href="#el-dialog-content" class="headerlink" title="el-dialog-content"></a>el-dialog-content</h3><p>el-dialog-content提供了三个插槽来供用户自定义对话框中的内容，这三个插槽分别是header（title已废弃），footer，默认插槽。</p><p>el-dialog-content主要作为对话框的内容容器存在，实现比较简单这里仅仅对el-dialog-content中的拖拽实现逻辑进行分析。el-dialog-content中使用了<code>useDraggable</code>钩子来实现拖拽功能。</p><p><code>useDraggable</code>接收三个参数分别是</p><ul><li>targetRef：移动目标</li><li>dragRef：拖拽目标</li><li>draggable：是否可拖拽（决定是否监听dragRef的mouseDown事件）</li></ul><p>useDraggable实现原理：<code>useDraggable</code>在组件挂载时向dragRef注册了<code>mousedown</code>事件，在这个事件里会保存鼠标按下时的位置，然后向<code>document</code>注册一个<code>mousemove</code>和<code>mouseup</code>事件，在<code>mousemove</code>事件里会计算得到原来位置与当前位置的偏移量然后再去改变<code>useDraggable</code>中维护的<code>transfrom</code>值和<code>targetRef</code>样式中的<code>transform</code>，当<code>mouseup</code>触发时会移除<code>mousemove</code>和<code>moveup</code>这两个事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//拖动位置的边界值</span><br><span class="hljs-keyword">const</span> downX = e.<span class="hljs-property">clientX</span><br><span class="hljs-keyword">const</span> downY = e.<span class="hljs-property">clientY</span><br><span class="hljs-keyword">const</span> &#123; offsetX, offsetY &#125; = transform<br><br><span class="hljs-keyword">const</span> targetRect = targetRef.<span class="hljs-property">value</span>!.<span class="hljs-title function_">getBoundingClientRect</span>()<br><span class="hljs-keyword">const</span> targetLeft = targetRect.<span class="hljs-property">left</span><br><span class="hljs-keyword">const</span> targetTop = targetRect.<span class="hljs-property">top</span><br><span class="hljs-keyword">const</span> targetWidth = targetRect.<span class="hljs-property">width</span><br><span class="hljs-keyword">const</span> targetHeight = targetRect.<span class="hljs-property">height</span><br><br><span class="hljs-keyword">const</span> clientWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span><br><span class="hljs-keyword">const</span> clientHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span><br><br><span class="hljs-keyword">const</span> minLeft = -targetLeft + offsetX<br><span class="hljs-keyword">const</span> minTop = -targetTop + offsetY<br><span class="hljs-keyword">const</span> maxLeft = clientWidth - targetLeft - targetWidth + offsetX<br><span class="hljs-keyword">const</span> maxTop = clientHeight - targetTop - targetHeight + offsetY<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//这里使用watchEffect，当draggable值发生改变时进行mouseDown的事件的注册和注销</span><br>    <span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (draggable.<span class="hljs-property">value</span>) &#123;<br>            <span class="hljs-title function_">onDraggable</span>()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">offDraggable</span>()<br>        &#125;<br>    &#125;)<br>&#125;)<br><br><span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">offDraggable</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="el-focus-trap"><a href="#el-focus-trap" class="headerlink" title="el-focus-trap"></a>el-focus-trap</h3><p>该组件封装了输入焦点事件，<code>esc</code>键盘事件，封装了焦点的获取逻辑。</p><p>该组件更多使用方法后续将会在其他组件详解中解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">该组件中抛出的事件<br>[<br>    <span class="hljs-string">&#x27;focusAfterTrapped&#x27;</span>,<br>    <span class="hljs-string">&#x27;focusAfterReleased&#x27;</span>,<br>    <span class="hljs-string">&#x27;focusin&#x27;</span>,<br>    <span class="hljs-string">&#x27;focusout&#x27;</span>,<br>    <span class="hljs-string">&#x27;focusout-prevented&#x27;</span>,<br>    <span class="hljs-comment">//esc 键盘事件</span><br>    <span class="hljs-string">&#x27;release-requested&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>element-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-plus弹出框详解</title>
    <link href="/2023/12/06/elemnet-plus%E5%BC%B9%E5%87%BA%E6%A1%86%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/12/06/elemnet-plus%E5%BC%B9%E5%87%BA%E6%A1%86%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="element-plus弹出框详解"><a href="#element-plus弹出框详解" class="headerlink" title="element-plus弹出框详解"></a>element-plus弹出框详解</h1><p><code>element-plus</code>弹出框与<code>vue2</code>版本实现方式发生了改变，虽然它们最后都是使用<em><strong>popper.js</strong></em>来实现但是在<code>element-plus</code>中针对<em><strong>popper.js</strong></em>专门封装了一些组件来实现弹出框功能。<code>element-plus</code>中提供了三个基础组件来供使用到弹出框的组件进行扩展，这三个组件分别是<strong>el-popper</strong>、<strong>el-trigger</strong>、<strong>el-content</strong>，以下将对这些组件进行解析。</p><h2 id="el-popper："><a href="#el-popper：" class="headerlink" title="el-popper："></a>el-popper：</h2><p><code>el-popper</code>作为<code>el-trigger</code>和<code>el-content</code>的父组件来使用，它通过<code>provide</code>向子组件提供了一系列的<code>dom</code> 元素引用，这样做的目的是为了让不同的的子组件也能够访问到这些<code>dom</code>，使得一些子组件比如<code>el-content</code>可以定位触发元素的位置，<code>el-popper</code>还提供了一个<em><strong>props</strong></em> <code>role</code>，属性声明了弹出框如何被使用。</p><p>下面对这些引用进行解释  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// popper.vue</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 触发弹出框的dom元素</span><br><span class="hljs-comment">   */</span><br>  triggerRef,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * popperjs的实例</span><br><span class="hljs-comment">   */</span><br>  popperInstanceRef,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 弹出框中内容的dom元素</span><br><span class="hljs-comment">   */</span><br>  contentRef,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span> popper reference element</span><br><span class="hljs-comment">   */</span><br>  referenceRef,      <br></code></pre></td></tr></table></figure><p>以下是所有角色类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// popper.ts</span><br>roleTypes = [<br>  <span class="hljs-string">&#x27;dialog&#x27;</span>,<br>  <span class="hljs-string">&#x27;grid&#x27;</span>,<br>  <span class="hljs-string">&#x27;group&#x27;</span>,<br>  <span class="hljs-string">&#x27;listbox&#x27;</span>,<br>  <span class="hljs-string">&#x27;menu&#x27;</span>,<br>  <span class="hljs-string">&#x27;navigation&#x27;</span>,<br>  <span class="hljs-string">&#x27;tooltip&#x27;</span>,<br>  <span class="hljs-string">&#x27;tree&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><h2 id="el-trigger："><a href="#el-trigger：" class="headerlink" title="el-trigger："></a>el-trigger：</h2><p><code>el-trigger</code>被用于指定弹出框的元素。el-trigger提供了一个默认的插槽，插槽中的元素即为默认触发弹出框的元素，它还提供了<code>virtualTriggering</code>和<code>virtualRef</code>用来手动指定触发元素。</p><p>以下是<code>virtualTriggering</code>为<code>true</code>时指定触发元素的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//trigger.vue</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">watch</span>(<br>      <span class="hljs-comment">//监听了virtualRef，如果设定了值则为triggerRef赋值</span><br>    <span class="hljs-function">() =&gt;</span> props.<span class="hljs-property">virtualRef</span>,<br>    <span class="hljs-function">(<span class="hljs-params">virtualEl</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (virtualEl) &#123;<br>        triggerRef.<span class="hljs-property">value</span> = <span class="hljs-title function_">unrefElement</span>(virtualEl <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>) <span class="hljs-comment">//vueuse unrefElement</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>    &#125;<br>  )<br></code></pre></td></tr></table></figure><p>默认情况下为triggerRef设定插槽值的操作在<code>el-only-child</code>中完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//trigger.vue</span><br><span class="hljs-title function_">useForwardRef</span>(triggerRef)<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useForwardRef = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">forwardRef: Ref&lt;T | <span class="hljs-literal">null</span>&gt;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">setForwardRef</span> = (<span class="hljs-params">el: T</span>) =&gt; &#123;<br>    forwardRef.<span class="hljs-property">value</span> = el<br>  &#125;<br><br>  <span class="hljs-title function_">provide</span>(<span class="hljs-variable constant_">FORWARD_REF_INJECTION_KEY</span>, &#123;<br>    setForwardRef,<br>  &#125;)<br>&#125;<br><span class="hljs-comment">//el-only-child.vue</span><br><span class="hljs-title function_">setup</span>(<span class="hljs-params">_, &#123; slots, attrs &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> forwardRefInjection = <span class="hljs-title function_">inject</span>(<span class="hljs-variable constant_">FORWARD_REF_INJECTION_KEY</span>)<br>    <span class="hljs-comment">//给目标ref设置 默认插槽中的dom</span><br>    <span class="hljs-keyword">const</span> forwardRefDirective = <span class="hljs-title function_">useForwardRefDirective</span>(<br>        forwardRefInjection?.<span class="hljs-property">setForwardRef</span> ?? <span class="hljs-variable constant_">NOOP</span><br>    )<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> defaultSlot = slots.<span class="hljs-property">default</span>?.(attrs)<br>        <span class="hljs-keyword">if</span> (!defaultSlot) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br><br>        <span class="hljs-keyword">if</span> (defaultSlot.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-title function_">debugWarn</span>(<span class="hljs-variable constant_">NAME</span>, <span class="hljs-string">&#x27;requires exact only one valid child.&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125;<br><br>        <span class="hljs-keyword">const</span> firstLegitNode = <span class="hljs-title function_">findFirstLegitChild</span>(defaultSlot)<br>        <span class="hljs-keyword">if</span> (!firstLegitNode) &#123;<br>            <span class="hljs-title function_">debugWarn</span>(<span class="hljs-variable constant_">NAME</span>, <span class="hljs-string">&#x27;no valid child node found&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125;<br><span class="hljs-comment">//注册指令</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">withDirectives</span>(<span class="hljs-title function_">cloneVNode</span>(firstLegitNode!, attrs), [<br>            [forwardRefDirective],<br>        ])<br>    &#125;<br>&#125;,<br><span class="hljs-comment">//绑定自定义指令</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useForwardRefDirective = (<br>  <span class="hljs-attr">setForwardRef</span>: <span class="hljs-title class_">ForwardRefSetter</span><br>): <span class="hljs-function"><span class="hljs-params">ObjectDirective</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params">el</span>) &#123;<br>      <span class="hljs-title function_">setForwardRef</span>(el)<br>    &#125;,<br>    <span class="hljs-title function_">updated</span>(<span class="hljs-params">el</span>) &#123;<br>      <span class="hljs-title function_">setForwardRef</span>(el)<br>    &#125;,<br>    <span class="hljs-title function_">unmounted</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setForwardRef</span>(<span class="hljs-literal">null</span>)<br>    &#125;,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="el-content："><a href="#el-content：" class="headerlink" title="el-content："></a>el-content：</h2><p><code>el-content</code>是实现弹出框的核心组件，它包含一个默认插槽用于插入弹出框的内容，在这个组件中还完成了popperjs实例的初始化，并且这个组件还向<code>el-arrow</code>组件提供了<em>arrowStyle</em>、<em>arrowRef</em>、<em>arrowOffset</em>用来定位弹出框的小三角和自定义小三角的样式。</p><p>在<code>usePopperContent</code>中完成了popperjs需要的选项的初始化并创建了popperjs的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//use-content.ts</span><br><span class="hljs-keyword">const</span> eventListenerModifier = <span class="hljs-title function_">computed</span>(...)<br><span class="hljs-keyword">const</span> arrowModifier = <span class="hljs-title function_">computed</span>(...)<br><span class="hljs-keyword">const</span> options = computed&lt;<span class="hljs-title class_">PartialOptions</span>&gt;(...)<br><span class="hljs-comment">//找到popper定位的元素</span><br><span class="hljs-keyword">const</span> computedReference = <span class="hljs-title function_">computed</span>(<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">unwrapMeasurableEl</span>(props.<span class="hljs-property">referenceEl</span>) || <span class="hljs-title function_">unref</span>(triggerRef)<br>)<br><span class="hljs-comment">//在usePopper中完成了实例的创建，并且在这里面还对options进行了监听，如果options发生了改变就给实例设置新的options</span><br><span class="hljs-keyword">const</span> &#123;..., update, ..., instanceRef &#125; =<br>      <span class="hljs-title function_">usePopper</span>(computedReference, contentRef, options)<br><span class="hljs-comment">//把properjs 实例注入到popperInstanceRef中</span><br><span class="hljs-title function_">watch</span>(instanceRef, <span class="hljs-function">(<span class="hljs-params">instance</span>) =&gt;</span> (popperInstanceRef.<span class="hljs-property">value</span> = instance))<br><span class="hljs-comment">//随定位元素位置改变来改变popper位置</span><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">watch</span>(<br>        <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">unref</span>(computedReference)?.<span class="hljs-title function_">getBoundingClientRect</span>(),<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">update</span>()<br>        &#125;<br>    )<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>element-plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS测量文本宽度</title>
    <link href="/2023/07/17/JS%E6%B5%8B%E9%87%8F%E6%96%87%E6%9C%AC%E5%AE%BD%E5%BA%A6/"/>
    <url>/2023/07/17/JS%E6%B5%8B%E9%87%8F%E6%96%87%E6%9C%AC%E5%AE%BD%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="JS测量文本宽度"><a href="#JS测量文本宽度" class="headerlink" title="JS测量文本宽度"></a>JS测量文本宽度</h1><h2 id="offsetWidth-测量"><a href="#offsetWidth-测量" class="headerlink" title="offsetWidth 测量"></a>offsetWidth 测量</h2><p>要获取文本宽度首先要将文本在文档中渲染出来，然后去获取文本的<code>offsetWidth</code>。<code>offsetWidth</code>是dom元素的一个只读属性，它由元素的<code>padding</code>，<code>内容宽度</code>，<code>边框宽度</code>，<code>滚动条宽度</code>共同组成，除了使用<code>offsetWidth</code>之外还可以使用<code>scrollWidth</code>，<code>clientWidth</code>去获取文本宽度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> 获取文本真实宽度</span><br><span class="hljs-comment"> @param fontStyle 字体样式</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getRealTextWidth</span> = (<span class="hljs-params">text, fontStyle</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>);<br>    span.<span class="hljs-property">style</span>.<span class="hljs-property">font</span> = fontStyle;<br>    span.<span class="hljs-property">innerText</span> = text;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(span);<br>    <span class="hljs-keyword">const</span> textWidth = span.<span class="hljs-property">offsetWidth</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(span);<br>    <span class="hljs-keyword">return</span> textWidth;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Canvas-测量"><a href="#Canvas-测量" class="headerlink" title="Canvas 测量"></a>Canvas 测量</h2><p>Canvas提供了<code>measureText</code>api来测量文本，它能够返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics">TextMetrics</a>对象，这个对象包含文本的尺寸信息。使用<code>measureText</code>来测量文本能够得到比<code>offsetWidth</code>更精准的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getRealTextWidthByCanvas</span> = (<span class="hljs-params">text, fontStyle</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    <span class="hljs-comment">// 宽高可以设置一个较大的值</span><br>    canvas.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-number">500</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>    canvas.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-number">500</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>    <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>    ctx.<span class="hljs-property">font</span> = fontStyle;<br>    <span class="hljs-keyword">return</span> ctx.<span class="hljs-title function_">measureText</span>(text).<span class="hljs-property">width</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-count-to原理分析</title>
    <link href="/2022/10/09/vuecounttoanalyze/"/>
    <url>/2022/10/09/vuecounttoanalyze/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-count-to组件解析"><a href="#vue-count-to组件解析" class="headerlink" title="vue-count-to组件解析"></a>vue-count-to组件解析</h1><blockquote><p><a href="https://github.com/PanJiaChen/vue-countTo">vue-count-to</a> is a vue component that will count to a target number at a specified duration</p></blockquote><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><p>组件接收参数</p><table><thead><tr><th align="center">名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">startVal</td><td align="center">开始数值</td></tr><tr><td align="center">endVal</td><td align="center">结束数值</td></tr><tr><td align="center">duration</td><td align="center">时间</td></tr><tr><td align="center">autoplay</td><td align="center">是否自动开始计数</td></tr><tr><td align="center">separator</td><td align="center">分割符</td></tr><tr><td align="center">prefix</td><td align="center">数值前缀</td></tr><tr><td align="center">suffix</td><td align="center">数值后缀</td></tr><tr><td align="center">useEasing</td><td align="center">是否使用缓动动画</td></tr><tr><td align="center">easingFn</td><td align="center">自定义缓动动画</td></tr><tr><td align="center">decimals</td><td align="center">保留小数位</td></tr><tr><td align="center">decimal</td><td align="center">小数位数值（当前小数位加上decimal）</td></tr></tbody></table><p>组件向外抛出了两个事件分别是<code>mountedCallback</code>和<code>callback</code>，它们分别在组件挂载完成和计算完成时触发。组件还提供了<code>start</code>、<code>pause</code>、<code>resume</code>、<code>reset</code>方法来控制计数器的开始、暂停、恢复、重置这些动作。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>组件中的计时动作在<code>主要count</code>方法中实现。计时器的动画使用<code>requestAnimationFrame</code>（如果浏览器不支持降级使用<code>setTimeout</code>）来实现，<code>requestAnimationFrame</code>会接收<code>count</code>方法作为回调函数，在这个回调函数中会记录当前计数器执行的剩余时间和已经过时间，然后通过缓动动画函数来计算目前的计时器的值，如果<code>useEasing</code>参数为<code>false</code>那么计数器将会通过已经经过的时间和动画时间比值来计算。</p><p>组件默认缓动动画函数为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * t：动画开始以来经过的时间</span><br><span class="hljs-comment"> * b：动画的起点值</span><br><span class="hljs-comment"> * c：动画的终点值</span><br><span class="hljs-comment"> * d：完成动画需要的时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">default</span>(<span class="hljs-params">t, b, c, d</span>) &#123;<br>    <span class="hljs-keyword">return</span> c * (-<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">10</span> * t / d) + <span class="hljs-number">1</span>) * <span class="hljs-number">1024</span> / <span class="hljs-number">1023</span> + b;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
